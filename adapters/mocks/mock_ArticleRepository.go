// Code generated by mockery. DO NOT EDIT.

package adapters //mocks

import (
	context "context"

	entities "github.com/alexSkiba15/article-golang-test/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

type ArticleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ArticleRepository) EXPECT() *ArticleRepository_Expecter {
	return &ArticleRepository_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function with given fields: ctx, entity
func (_m *ArticleRepository) BulkCreate(ctx context.Context, entity *[]entities.Article) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]entities.Article) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleRepository_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type ArticleRepository_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *[]entities.Article
func (_e *ArticleRepository_Expecter) BulkCreate(ctx interface{}, entity interface{}) *ArticleRepository_BulkCreate_Call {
	return &ArticleRepository_BulkCreate_Call{Call: _e.mock.On("BulkCreate", ctx, entity)}
}

func (_c *ArticleRepository_BulkCreate_Call) Run(run func(ctx context.Context, entity *[]entities.Article)) *ArticleRepository_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*[]entities.Article))
	})
	return _c
}

func (_c *ArticleRepository_BulkCreate_Call) Return(_a0 error) *ArticleRepository_BulkCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleRepository_BulkCreate_Call) RunAndReturn(run func(context.Context, *[]entities.Article) error) *ArticleRepository_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, entity
func (_m *ArticleRepository) Create(ctx context.Context, entity *entities.Article) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Article) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ArticleRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *entities.Article
func (_e *ArticleRepository_Expecter) Create(ctx interface{}, entity interface{}) *ArticleRepository_Create_Call {
	return &ArticleRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *ArticleRepository_Create_Call) Run(run func(ctx context.Context, entity *entities.Article)) *ArticleRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Article))
	})
	return _c
}

func (_c *ArticleRepository_Create_Call) Return(_a0 error) *ArticleRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.Article) error) *ArticleRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *ArticleRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type ArticleRepository_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ArticleRepository_Expecter) DeleteById(ctx interface{}, id interface{}) *ArticleRepository_DeleteById_Call {
	return &ArticleRepository_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *ArticleRepository_DeleteById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ArticleRepository_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ArticleRepository_DeleteById_Call) Return(_a0 error) *ArticleRepository_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleRepository_DeleteById_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *ArticleRepository_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, params
func (_m *ArticleRepository) Get(ctx context.Context, params *entities.Article) (*entities.Article, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Article) (*entities.Article, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Article) *entities.Article); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Article) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ArticleRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - params *entities.Article
func (_e *ArticleRepository_Expecter) Get(ctx interface{}, params interface{}) *ArticleRepository_Get_Call {
	return &ArticleRepository_Get_Call{Call: _e.mock.On("Get", ctx, params)}
}

func (_c *ArticleRepository_Get_Call) Run(run func(ctx context.Context, params *entities.Article)) *ArticleRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Article))
	})
	return _c
}

func (_c *ArticleRepository_Get_Call) Return(_a0 *entities.Article, _a1 error) *ArticleRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArticleRepository_Get_Call) RunAndReturn(run func(context.Context, *entities.Article) (*entities.Article, error)) *ArticleRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *ArticleRepository) GetAll(ctx context.Context) (*[]entities.Article, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]entities.Article, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]entities.Article); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ArticleRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ArticleRepository_Expecter) GetAll(ctx interface{}) *ArticleRepository_GetAll_Call {
	return &ArticleRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *ArticleRepository_GetAll_Call) Run(run func(ctx context.Context)) *ArticleRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ArticleRepository_GetAll_Call) Return(_a0 *[]entities.Article, _a1 error) *ArticleRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArticleRepository_GetAll_Call) RunAndReturn(run func(context.Context) (*[]entities.Article, error)) *ArticleRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ArticleRepository) GetById(ctx context.Context, id uuid.UUID) (*entities.Article, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entities.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Article, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Article); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type ArticleRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ArticleRepository_Expecter) GetById(ctx interface{}, id interface{}) *ArticleRepository_GetById_Call {
	return &ArticleRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *ArticleRepository_GetById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ArticleRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ArticleRepository_GetById_Call) Return(_a0 *entities.Article, _a1 error) *ArticleRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArticleRepository_GetById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entities.Article, error)) *ArticleRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, entity
func (_m *ArticleRepository) Update(ctx context.Context, entity *entities.Article) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Article) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ArticleRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *entities.Article
func (_e *ArticleRepository_Expecter) Update(ctx interface{}, entity interface{}) *ArticleRepository_Update_Call {
	return &ArticleRepository_Update_Call{Call: _e.mock.On("Update", ctx, entity)}
}

func (_c *ArticleRepository_Update_Call) Run(run func(ctx context.Context, entity *entities.Article)) *ArticleRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Article))
	})
	return _c
}

func (_c *ArticleRepository_Update_Call) Return(_a0 error) *ArticleRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleRepository_Update_Call) RunAndReturn(run func(context.Context, *entities.Article) error) *ArticleRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAll provides a mock function with given fields: ctx, entity
func (_m *ArticleRepository) UpdateAll(ctx context.Context, entity *[]entities.Article) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]entities.Article) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleRepository_UpdateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAll'
type ArticleRepository_UpdateAll_Call struct {
	*mock.Call
}

// UpdateAll is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *[]entities.Article
func (_e *ArticleRepository_Expecter) UpdateAll(ctx interface{}, entity interface{}) *ArticleRepository_UpdateAll_Call {
	return &ArticleRepository_UpdateAll_Call{Call: _e.mock.On("UpdateAll", ctx, entity)}
}

func (_c *ArticleRepository_UpdateAll_Call) Run(run func(ctx context.Context, entity *[]entities.Article)) *ArticleRepository_UpdateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*[]entities.Article))
	})
	return _c
}

func (_c *ArticleRepository_UpdateAll_Call) Return(_a0 error) *ArticleRepository_UpdateAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleRepository_UpdateAll_Call) RunAndReturn(run func(context.Context, *[]entities.Article) error) *ArticleRepository_UpdateAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
